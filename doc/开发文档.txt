**“实时建图系统”开发文档**

**目标平台：** Windows/linux 

**1. 项目概述**

“剑鞘系统”是一款基于QT6和C++开发的霸屏应用程序，旨在为Windows平台提供一个受控的、沉浸式的现代化操作环境。系统核心功能包括管理员安全登录（通过自定义组合键唤醒）、白名单应用管理、用户模式下的快捷键拦截以及精确的窗口层级控制，确保用户只能在预设的应用范围内操作，同时“剑鞘系统”本身保持全屏，遮挡桌面和任务栏。UI/UX设计追求现代化、流畅和美观。

**2. 系统架构**

系统采用模块化设计，主要包括以下几个核心组件：

*   **`JianqiaoCoreShell` (主框架模块):**
    *   **职责:** 应用程序的入口和主生命周期管理，负责加载其他模块，处理模式切换（管理员/用户），初始化全屏界面。
    *   **技术要点:**
        *   QT6 `QMainWindow` 或 `QWidget` 作为主窗口基类。
        *   实现无边框、全屏显示 (`showFullScreen()`)，并确保覆盖桌面及任务栏。
        *   配置文件加载与解析。
    *   **UI/UX:** 应用整体框架，承载各视图。启动和关闭过渡动画应平滑。

*   **`AdminModule` (管理员模块):**
    *   **职责:** 提供管理员操作界面和后台逻辑。
    *   **子组件/功能:**
        *   `AdminLoginView`: 管理员登录界面。UI设计简洁、安全感强，可考虑非传统唤出动画（如边缘滑出）。
        *   `AdminAuthService`: 管理员身份验证逻辑。
        *   `WhitelistManagerView`: 白名单应用配置界面。采用现代列表/卡片式布局，支持即时搜索/过滤，操作按钮图标化。
        *   `WhitelistStorageService`: 白名单数据持久化 (JSON/SQLite)。
    *   **技术要点:** 自定义组合键捕获，安全密码存储 (哈希加盐)。
    *   **UI/UX:** 界面元素使用现代控件样式，交互反馈清晰。

*   **`UserModeModule` (用户模式模块):**
    *   **职责:** 提供受限的用户操作环境。
    *   **子组件/功能:**
        *   `UserView`: 用户模式主界面，展示白名单应用启动器。可设计为类Launchpad、Dock栏或卡片网格。应用图标美观清晰。背景可考虑动态、模糊（毛玻璃）或主题色联动。
        *   `AppLauncherService`: 启动和监控白名单应用。
        *   `ShortcutInterceptor`: 拦截禁用快捷键。
        *   `WindowOrderController`: 维护 `白名单应用 > 剑鞘系统 > 桌面` 窗口层级。
    *   **技术要点:** 快捷键拦截，进程启动 (`QProcess`)，窗口层级控制。
    *   **UI/UX:** 用户长时间停留界面，设计需高度现代化、沉浸式。应用启动/切换过渡平滑。

*   **`SystemInteractionModule` (底层系统交互模块 - Windows特定):**
    *   **职责:** 封装与Windows操作系统底层API的交互。
    *   **子组件/功能:**
        *   `GlobalKeyboardHook`: 使用 `SetWindowsHookEx` 与 `WH_KEYBOARD_LL` 实现全局键盘钩子。
        *   `WindowControlAPIWrapper`: 封装 `SetWindowPos`, `GetForegroundWindow`, `SetForegroundWindow`, `EnumWindows`, `FindWindowEx`, `SHAppBarMessage` 等Windows API。研究DWM API (如 `DwmEnableBlurBehindWindow` 或更新的Composition API) 以实现可能的毛玻璃效果 (如管理员界面的弹出面板)。处理窗口自定义边框和标题栏 (`WM_NCHITTEST`)。
        *   `ProcessManager`: 使用 `QProcess`。
    *   **技术要点:** 平台依赖性代码高度集中于此。错误处理和资源释放至关重要。

**3. 核心功能实现方案与技术难点 (Windows平台)**

*   **3.1. 自定义组合键打开管理员登录界面:**
    *   `GlobalKeyboardHook`捕获组合键，通知`AdminModule`显示`AdminLoginView`。
*   **3.2. 用户模式快捷键拦截:**
    *   `GlobalKeyboardHook`在用户模式下过滤并消费禁用快捷键。
    *   **`Ctrl+Alt+Del`:** 应用层面极难拦截。推荐通过组策略编辑器 (gpedit.msc) 禁用，或与客户明确此限制。
*   **3.3. 窗口层级管理 (`白名单应用 > 剑鞘系统 > 桌面`):**
    *   `JianqiaoCoreShell`主窗口全屏置顶。
    *   启动白名单应用后，使用`WindowControlAPIWrapper`调整其窗口与剑鞘系统窗口的Z-order。
    *   持续监控窗口状态，动态维护层级。
    *   **任务栏隐藏:** 确保任务栏可靠隐藏 (如使用 `SHAppBarMessage`)。
*   **3.4. 白名单应用管理:**
    *   管理员界面CRUD，`QProcess`启动。

**4. UI/UX设计指南 (现代化，Windows)**

*   **设计原则:** 一致性、反馈性、简约性、流畅性。
*   **视觉风格:** 扁平化设计，简约清晰的图标和排版，流畅自然的过渡动画。
*   **工具与资源:**
    *   **图标库:** Fluent UI System Icons, Material Design Icons (注意授权)。
    *   **配色方案:** 专业、和谐，可提供主题选择。
*   **Qt实现:**
    *   **QML:** 推荐用于构建动态和视觉丰富的UI，尤其用户模式界面。
    *   **Qt Widgets + QSS:** 若使用Widgets，需精心编写QSS，可借鉴现代QSS主题。可使用 `QGraphicsEffect`。
    *   **自定义控件:** 必要时创建。
*   **Windows平台特性利用:**
    *   **窗口效果:** DWM API可用于实现Mica/Acrylic透明模糊效果（用于非主要遮挡区域的UI元素）。
    *   **窗口动画:** 结合Windows动画API或 `QPropertyAnimation`。
    *   **原生通知:** 若需通知，可使用Windows Toast Notifications。

**5. 开发环境与工具**

*   **IDE:** Qt Creator, Visual Studio (with Qt VS Tools), CLion.
*   **编译器:** MSVC.
*   **版本控制:** Git.
*   **构建系统:** qmake 或 CMake.
*   **Qt版本:** Qt 6.x.

**6. 开发优先级与迭代建议**

1.  **MVP (最高优先级):** 
    *   全屏框架 (已完成基础)。
    *   热键唤醒登录界面 (PoC，已完成基础，热键可配置)。
    *   **管理员白名单应用配置界面 (`WhitelistManagerView` PoC):** 允许管理员通过UI增删白名单应用，并持久化到配置文件 (例如 `config.json`)。
    *   基于配置的白名单应用启动与层级管理 (PoC，用户模式下能启动管理员配置的应用并置顶)。
    *   基础快捷键拦截 (PoC，例如拦截Win键)。

2.  **管理员功能完善:** 
    *   完善 `AdminLoginView` 实际登录逻辑和UI。
    *   完善 `AdminAuthService` 安全身份验证。
    *   打磨 `WhitelistManagerView` 用户体验和功能完整性。
    *   其他管理员配置项 (如系统主题、行为设置等)。

3.  **用户模式功能完善与健壮性:**
    *   `UserView` 用户界面的设计与实现 (如应用启动器布局、背景效果等)。
    *   `AppLauncherService` 的健壮性，应用状态监控。
    *   `ShortcutInterceptor` 的完整实现，覆盖更多需禁用的快捷键。
    *   `WindowOrderController` 的精细化管理，确保窗口层级在各种情况下的稳定性。

4.  **UI/UX整体打磨、性能优化、多场景测试、最终交付。**

**7. 关键技术预研与注意事项 (Windows)**

*   深入研究 `SetWindowsHookEx`, `WH_KEYBOARD_LL`, `RegisterHotKey`, `SetWindowPos`, `GetWindowThreadProcessId`, `AttachThreadInput`, `SetForegroundWindow`, `BringWindowToTop`, DWM API等。
*   **权限问题:** 应用可能需管理员权限运行。
*   **错误处理与日志记录:** 对OS API调用进行充分错误检查。
*   **资源管理:** 确保钩子、句柄等正确释放。
*   **模块化和接口设计:** `SystemInteractionModule`接口清晰。
*   **安全性:** 管理员密码存储，防止应用被轻易关闭。
*   **多线程:** 耗时或监控任务考虑使用独立线程。

**8. 测试要点**

*   快捷键拦截完整性。
*   各种场景下窗口层级的稳定性。
*   管理员组合键可靠性。
*   白名单应用兼容性。
*   系统资源占用和性能。
*   长时间运行稳定性。

这份文档将作为项目开发的核心技术指引。
